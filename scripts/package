#!/bin/bash
set -e

source $(dirname $0)/version

cd $(dirname $0)/..

if [ -n "$DOCKER_PASSWORD" ]; then
    echo "Logging to registry $DOCKER_REGISTRY"
    echo $DOCKER_PASSWORD | docker login -u "$DOCKER_USERNAME" --password-stdin $DOCKER_REGISTRY
    PUSH=true
fi

export TAG
make build-test
make iso

if [ "$PUSH" = "true" ]; then
    make push
fi

if [ "$PUSH" = "true" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ] && [ -n "${DRONE_TAG}" ]; then
    IMAGE_TARGETS="${IMAGE_TARGETS} all-amis"
fi

export GIT_COMMIT=${COMMIT}
if [ -n "${IMAGE_TARGETS}" ]; then
    make -j8 ${IMAGE_TARGETS}
fi

isoinfo -x /rootfs.squashfs -R -i build/output.iso > build/output.squashfs
isoinfo -x /boot/kernel.xz -R -i build/output.iso > build/output-kernel
isoinfo -x /boot/rootfs.xz -R -i build/output.iso > build/output-initrd

RELEASE_URL=${RELEASE_URL:-https://github.com/rancher-sandbox/os2/releases/download}
INSTALL_CFG=${RELEASE_URL}/${VERSION}/example-cloud-init
PXE_ASSET_VERSION="\${version}-\${arch}"
if [ "${TAG}" = "dev" ]; then
    RELEASE_URL=tftp://10.0.2.2
    INSTALL_CFG=
    VERSION=${TAG}
    PXE_ASSET_VERSION=${TAG}
fi

cat > build/output.ipxe << EOF
#!ipxe
set arch ${ARCH}
set version ${VERSION}
set url ${RELEASE_URL}/\${version}
set kernel rancheros-${PXE_ASSET_VERSION}-kernel
set initrd rancheros-${PXE_ASSET_VERSION}-initrd
set rootfs rancheros-${PXE_ASSET_VERSION}.squashfs
set iso    rancheros-${PXE_ASSET_VERSION}.iso
# set config http://example.com/machine-config
# set cmdline extra.values=1
kernel \${url}/\${kernel} initrd=\${initrd} ip=dhcp rd.cos.disable root=live:\${url}/\${rootfs} rancheros.install.automatic=true rancheros.install.iso_url=\${url}/\${iso} rancheros.install.config_url=\${config} console=tty1 console=ttyS0 \${cmdline}
initrd \${url}/\${initrd}
boot
EOF

GITHUB_REPOSITORY="${GITHUB_REPOSITORY:-rancher-sandbox/os2}"
UPGRADECHANNEL_DISCOVERY_IMAGE="${UPGRADECHANNEL_DISCOVERY_IMAGE:-quay.io/costoolkit/upgradechannel-discovery:v0.3-4b83dbe}"
for i in "amd64"; do
cat > build/output.upgradechannel-$i.yaml << EOF
apiVersion: rancheros.cattle.io/v1
kind: ManagedOSVersionChannel
metadata:
  name: os2-$i
  namespace: fleet-default
spec:
  options:
    args:
    - github
    command:
    - /usr/bin/upgradechannel-discovery
    envs:
    - name: REPOSITORY
      value: ${GITHUB_REPOSITORY}
    - name: IMAGE_PREFIX
      value: ${REPO}
    - name: VERSION_SUFFIX
      value: -${i}
    image: $UPGRADECHANNEL_DISCOVERY_IMAGE
  type: custom
EOF
done

mkdir -p dist/artifacts
for i in build/output*; do
    mv -f $i dist/artifacts/rancheros-${TAG}${i##build/output}
    echo Built: dist/artifacts/rancheros-${TAG}${i##build/output}
done
