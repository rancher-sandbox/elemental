name: Bootstrap RancherOS on a VM with Rancher

on:
  push:
    branches: [ master ]
    paths-ignore:
    - 'docs/**'
    - '*docs*'
    - 'README.md'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_USERNAME: ${{ secrets.QUAY_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
      DOCKER_REGISTRY: quay.io
      REPO: quay.io/costoolkit/os2-ci
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      - name: Make images (container/iso/qcow2/etc.)
        run: make ci
      - name: Upload ISO
        uses: actions/upload-artifact@v3
        with:
          name: iso
          path: |
            dist/artifacts/*.iso
          if-no-files-found: error
      - name: Upload Squashfs
        uses: actions/upload-artifact@v3
        with:
          name: squashfs
          path: |
            dist/artifacts/*.squashfs
          if-no-files-found: error
      - name: Upload iPXE
        uses: actions/upload-artifact@v3
        with:
          name: ipxe
          path: |
            dist/artifacts/*.ipxe
          if-no-files-found: error
      - name: Upload YAML
        uses: actions/upload-artifact@v3
        with:
          name: YAML
          path: |
            dist/artifacts/*.yaml
          if-no-files-found: error
      - name: Upload Kernel
        uses: actions/upload-artifact@v3
        with:
          name: kernel
          path: |
            dist/artifacts/*-kernel
          if-no-files-found: error
      - name: Upload Initrd
        uses: actions/upload-artifact@v3
        with:
          name: initrd
          path: |
            dist/artifacts/*-initrd
          if-no-files-found: error
      - name: Release space from worker â™»
        if: always()
        run: |
          sudo rm -rf build bin dist
          docker system prune -f -a --volumes
  e2e-tests:
    runs-on: kvm-host
    needs: build
    container:
      image: opensuse/leap:latest
      env:
        CLUSTER_NAME: cluster-k3s
        CLUSTER_NS: fleet-default
        INSTALL_K3S_VERSION: v1.21.9+k3s1
        INSTALL_K3S_SKIP_ENABLE: true
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      options: --privileged
    steps:
      - name: Install dependencies
        run: zypper -n in -l qemu-kvm libvirt virt-install curl helm git-core tar make gcc
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
            go-version: '~1.17'
      - name: Download ISO
        uses: actions/download-artifact@v3
        with:
          name: iso
      - name: Download Squashfs
        uses: actions/download-artifact@v3
        with:
          name: squashfs
      - name: Download iPXE
        uses: actions/download-artifact@v3
        with:
          name: ipxe
      - name: Download Kernel
        uses: actions/download-artifact@v3
        with:
          name: kernel
      - name: Download Initrd
        uses: actions/download-artifact@v3
        with:
          name: initrd
      - name: E2E - Clean local Helm repositorie
        run: |
          # Clean Helm repo
          HELM_REPO=$(helm repo list 2>/dev/null | awk '(NR>1) { print $1 }')
          [[ -n "${HELM_REPO}" ]] && helm repo remove ${HELM_REPO}
      - name: E2E - Install Rancher
        run: |
          cd tests && make e2e-install-rancher
      - name: E2E - Bootstrap node 1 with current build
        env:
          VM_INDEX: 1
        run: |
          # Execute test
          cd tests && make e2e-bootstrap-node
      - name: E2E - Clean current build
        run: |
          # Backup *ALL* files from current build
          mkdir -p keep-current-build
          mv -f rancheros-${GITHUB_SHA::7}-${ARCH}* keep-current-build/
          # Download the latest *OFFICIAL* version available
          OS2_ISO=$(curl -s ${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases/latest \
                           | awk "/browser_download_url.*-${ARCH}.iso/ { gsub(\"\\\"\",\"\"); print \$2 }")
          for I in \.iso \.ipxe \.squashfs -kernel -initrd; do URL=${OS2_ISO/\.iso/${I}}; curl -Ls -o ${URL##*/} ${URL}; done
      - name: E2E - Bootstrap node 2 with latest released build
        env:
          VM_INDEX: 2
        run: |
          # Execute test
          cd tests && make e2e-bootstrap-node
      - name: E2E - Upgrade node 2 (with osImage method)
        env:
          UPGRADE_TYPE: osimage
          REPO: quay.io/costoolkit/os2-ci
          VM_INDEX: 2
          ARCH: amd64
        run: |
          # Execute test
          export CONTAINER_IMAGE=${REPO}:${GITHUB_SHA::7}
          cd tests && make e2e-upgrade-node
      - name: E2E - Bootstrap node 3 with latest released build
        env:
          VM_INDEX: 3
        run: |
          # Execute test
          cd tests && make e2e-bootstrap-node
      - name: E2E - Upgrade node 3 (with UpgradeChannel method)
        env:
          UPGRADE_TYPE: upgradechannel
          VM_INDEX: 3
          ARCH: amd64
        run: |
          # Restore upgradechannel yaml file
          cp -a keep-current-build/rancheros-${GITHUB_SHA::7}-${ARCH}.upgradechannel-${ARCH}.yaml .
          # Execute test
          cd tests && make e2e-upgrade-node
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: k3s-install.log
          path: /tmp/k3s.log
          if-no-files-found: warn
