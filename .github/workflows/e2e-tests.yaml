name: Elemental End-To-End tests with Rancher

on:
  push:
    branches: [ master ]
    paths-ignore:
      - 'docs/**'
      - '*docs*'
      - 'README.md'
  workflow_dispatch:

env:
  REPO: quay.io/costoolkit/os2-ci
jobs:
  build:
    runs-on: build-host
    container:
      image: ubuntu:latest
      env:
        DOCKER_USERNAME: ${{ secrets.QUAY_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
        DOCKER_REGISTRY: quay.io
    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y sudo make curl docker.io
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Make images (container/iso/qcow2/etc.)
        run: make ci
      - name: Cache data
        uses: actions/cache@v3
        id: cache-artifacts
        with:
          path: dist/artifacts/*
          key: ${{ github.sha }}-${{ github.repository }}-artifacts
      - name: Upload .txt
        uses: actions/upload-artifact@v3
        with:
          name: txt
          path: dist/artifacts/*.txt
          if-no-files-found: warn
  e2e-tests:
    runs-on: kvm-host
    needs: build
    container:
      image: opensuse/leap:latest
      env:
        CLUSTER_NAME: cluster-k3s
        CLUSTER_NS: fleet-default
        INSTALL_K3S_VERSION: v1.21.9+k3s1
        INSTALL_K3S_SKIP_ENABLE: true
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        ARCH: amd64
      options: --privileged
    steps:
      - name: Install dependencies
        run: zypper -n in -l qemu-kvm libvirt virt-install curl helm git-core tar make gcc
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '~1.17'
      - name: Download cache
        uses: actions/cache@v3
        id: cache-artifacts
        with:
          path: dist/artifacts/*
          key: ${{ github.sha }}-${{ github.repository }}-artifacts
      - name: Move artifacts
        run: |
          ls -l dist/artifacts/
          mv dist/artifacts/* .
      - name: E2E - Clean local Helm repositorie
        run: |
          # Clean Helm repo
          HELM_REPO=$(helm repo list 2>/dev/null | awk '(NR>1) { print $1 }')
          [[ -n "${HELM_REPO}" ]] && helm repo remove ${HELM_REPO} || true
      - name: E2E - Install Rancher
        run: cd tests && make e2e-install-rancher
      - name: E2E - Bootstrap node 1 with current build
        env:
          VM_INDEX: 1
        run: cd tests && make e2e-bootstrap-node
      - name: E2E - Bootstrap node 2 with current build
        env:
          VM_INDEX: 2
        run: cd tests && make e2e-bootstrap-node
      - name: E2E - Upgrade node 2 (with UpgradeChannel method) to latest released build
        env:
          UPGRADE_TYPE: managedOSVersionName
          VM_INDEX: 2
        run: |
          VERSION=$(curl -s ${GITHUB_API_URL}/repos/${GITHUB_REPOSITORY}/releases/latest \
                    | sed -n -E '/"tag_name":/s/.*"([^"]+)".*/\1/p')
          # This variable is used to check the OS version after upgrade
          export CONTAINER_IMAGE=:${VERSION}-${ARCH}
          # Execute test
          cd tests && make e2e-upgrade-node
      - name: E2E - Backup current build
        run: mkdir -p backup && mv -f rancheros-${GITHUB_SHA::7}-${ARCH}* $_
      - name: E2E - Download latest release
        uses: robinraju/release-downloader@v1.3
        with:
          repository: ${{ github.repository }}
          latest: true
          fileName: "*"
      - name: E2E - Bootstrap node 3 with latest released build
        env:
          VM_INDEX: 3
        run: cd tests && make e2e-bootstrap-node
      - name: E2E - Upgrade node 3 (with osImage method) to current build
        env:
          UPGRADE_TYPE: osImage
          VM_INDEX: 3
        run: |
          # This variable is used to upgrade the OS and check the OS version after upgrade
          export CONTAINER_IMAGE=${REPO}:${GITHUB_SHA::7}-${ARCH}
          # Execute test
          cd tests && make e2e-upgrade-node
      - name: E2E - Bootstrap node 4 with latest released build
        env:
          VM_INDEX: 4
        run: cd tests && make e2e-bootstrap-node
      - name: E2E - Upgrade node 4 (with manual method) to current build
        env:
          UPGRADE_TYPE: manual
          VM_INDEX: 4
        run: |
          # This variable is used to upgrade the OS and check the OS version after upgrade
          export CONTAINER_IMAGE=${REPO}:${GITHUB_SHA::7}-${ARCH}
          # Execute test
          cd tests && make e2e-upgrade-node
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: k3s-install.log
          path: /tmp/k3s.log
          if-no-files-found: warn
      - name: Release space from container ♻
        if: always()
        run: |
          rm -rf build bin dist
  cleanup:
    runs-on: kvm-host
    if: always()
    needs: e2e-tests
    steps:
      - name: Release space from worker ♻
        run: |
          sudo docker system prune -f -a --volumes
