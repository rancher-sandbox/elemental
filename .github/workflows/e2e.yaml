name: Elemental End-To-End tests with Rancher Manager

on:
  workflow_run:
    workflows:
      - build-ci
    branches:
      - main
    types:
      - completed

concurrency:
  group: e2e-test-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true

jobs:
  e2e-tests:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: kvm-host
    env:
      TIMEOUT_SCALE: 2
      ARCH: amd64
      CLUSTER_NAME: cluster-rke2
      CLUSTER_NS: fleet-default
      # For K3s installation used to host Rancher Manager
      INSTALL_K3S_VERSION: v1.23.8+k3s2
      INSTALL_K3S_SKIP_ENABLE: true
      K3S_KUBECONFIG_MODE: 0644
      DASHBOARD_VERSION: latest
      # For K8s cluster to provision with Rancher Manager
      K8S_VERSION_TO_PROVISION: v1.23.8+rke2r1
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - name: Be sure to remove all previous data from worker ♻
        run: rm -rf ./*
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '~1.18'
      - name: Download iPXE
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ${{ github.event.workflow_run.workflow_id }}
          workflow_conclusion: success
          name: ipxe-artifacts
          # Force the path, this is a security hint!
          path: ./
      - name: E2E - Clean local Helm repositories
        run: |
          # Clean Helm repo
          HELM_REPO=$(helm repo list 2>/dev/null | awk '(NR>1) { print $1 }')
          [[ -n "${HELM_REPO}" ]] && helm repo remove ${HELM_REPO} || true
      - name: E2E - Install Rancher
        run: cd tests && HOSTNAME=$(hostname -f) make e2e-install-rancher
      - name: E2E - Configure Rancher & Libvirt
        run: cd tests && make e2e-configure-rancher
      - name: E2E - Bootstrap node 1 with current build (use Emulated TPM)
        env:
          EMULATE_TPM: true
          VM_INDEX: 1
        run: cd tests && make e2e-bootstrap-node
      - name: E2E - Upgrade node 1 (with osImage method) to latest build
        env:
          CONTAINER_IMAGE: quay.io/costoolkit/elemental-ci:latest
          UPGRADE_TYPE: osImage
          VM_INDEX: 1
        run: cd tests && make e2e-upgrade-node
      - name: E2E - Bootstrap node 2 with current build
        env:
          VM_INDEX: 2
        run: cd tests && make e2e-bootstrap-node
      - name: E2E - Bootstrap node 3 with current build
        env:
          VM_INDEX: 3
        run: cd tests && make e2e-bootstrap-node
      - name: E2E - Upgrade node 2 (with manual method) to latest build
        env:
          CONTAINER_IMAGE: quay.io/costoolkit/elemental-ci:latest
          UPGRADE_TYPE: manual
          VM_INDEX: 2
        run: cd tests && make e2e-upgrade-node
      - name: Remove VMs and K3s/RancherManager from worker ♻
        if: always()
        run: |
          # Remove all VMs
          for I in {1..10}; do
            for C in destroy undefine; do
              sudo virsh ${C} node-${I} >/dev/null 2>&1 || true
            done
          done
          # Remove K3s and Rancher Manager
          /usr/local/bin/k3s-uninstall.sh || true
      - name: Remove remaining stuff from worker ♻
        if: always()
        uses: colpal/actions-clean@v1
      - name: Send failed status to slack (if needed)
        if: failure()
        uses: slackapi/slack-github-action@v1.18.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "Workflow build-ci ${{ github.job }}"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": ":github:",
                         "emoji": true
                        },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
