name: Integration tests
on:
  push:
    branches:
      - master
  pull_request:

concurrency:
  group: integration-tests=full-${{ github.head_ref || github.ref }}-${{ github.repository }}
  cancel-in-progress: true

env:
  REPO: ttl.sh/os2-ci
jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ttl.sh
      TAG: ${{ github.sha }}
      PUSH: "true"
      # Disable KVM for Vagrant image (can be forced during execution if needed)
      NO_KVM: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      - name: Make images (container/iso/qcow2/etc.)
        run: make ci
      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: artifacts
          path: |
            dist/artifacts/*
            !dist/artifacts/*.iso
            !dist/artifacts/*.qcow.gz
            !dist/artifacts/*.box
          if-no-files-found: error
      - name: Upload ISO
        uses: actions/upload-artifact@v3
        with:
          name: iso
          path: dist/artifacts/*.iso
          if-no-files-found: warn
      - name: Upload QCOW
        uses: actions/upload-artifact@v3
        with:
          name: qcow
          path: dist/artifacts/*.qcow.gz
          if-no-files-found: warn
      - name: Upload BOX
        uses: actions/upload-artifact@v3
        with:
          name: box
          path: dist/artifacts/*.box
          if-no-files-found: warn
      - name: Upload .txt
        uses: actions/upload-artifact@v3
        with:
          name: txt
          path: dist/artifacts/*.txt
          if-no-files-found: warn
      - name: Release space from worker ♻
        if: always()
        run: |
          sudo rm -rf build bin dist || true
          docker system prune -f -a --volumes || true
  tests-installer:
    runs-on: macos-10.15
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '~1.17'
      - name: Install dependencies
        run: brew install cdrtools jq
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: iso
          path: artifacts
      - name: Run tests
        env:
          BOX_URL: ${{ github.event.inputs.box-image }}
        run: |
          ls -liah
          ls -liah artifacts
          mv artifacts/*.iso ros.iso
          rm -rf artifacts
          export COS_HOST=127.0.0.1:2222
          export ISO=$PWD/ros.iso
          export CONTAINER_IMAGE=$REPO:$TAG
          make deps
          cd tests && make installer-tests
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ros-vbox.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - name: Release space from worker ♻
        if: always()
        run: |
          cd tests && make clean || true
          sudo rm -rf build bin dist || true
          docker system prune -f -a --volumes || true
  tests-vbox:
    runs-on: macos-10.15
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '~1.17'
      - name: Install dependencies
        run: brew install cdrtools jq
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: iso
          path: artifacts
      - name: Run tests
        env:
          BOX_URL: ${{ github.event.inputs.box-image }}
        run: |
          ls -liah
          ls -liah artifacts
          mv artifacts/*.iso ros.iso
          rm -rf artifacts
          export COS_HOST=127.0.0.1:2222
          export ISO=$PWD/ros.iso
          make deps
          cd tests && make vbox-tests
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ros-vbox.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - name: Release space from worker ♻
        if: always()
        run: |
          cd tests && make clean || true
          sudo rm -rf build bin dist || true
          docker system prune -f -a --volumes || true
  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '~1.17'
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: box
          path: artifacts
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get remove -y apparmor*
          sudo apt-get install -y qemu-system-x86 make libvirt-daemon-system bridge-utils ovmf curl
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install vagrant
          sudo apt-get install -y qemu libvirt-daemon-system libvirt-clients ebtables dnsmasq-base
          sudo apt-get install -y libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev
          sudo apt-get install -y libguestfs-tools gcc
          vagrant plugin install vagrant-libvirt
      - name: Prepare libvirt
        run: |
          # Create bridge conf
          sudo mkdir -p /etc/qemu/
          echo "allow all" | sudo tee -a /etc/qemu/bridge.conf
          sudo chmod u+r /etc/qemu/bridge.conf
          sudo chmod u+s $(find /usr/ -name qemu-bridge-helper -print -quit|xargs)

          # sudo /usr/sbin/libvirtd &
          # sleep 5
          # Set a static ip for our VM
          sudo virsh net-update default add ip-dhcp-host "<host mac='52:54:00:00:00:01' name='jojo' ip='192.168.122.50' />" --live --config || true
      - name: Run tests
        run: |
          ls -liah
          ls -liah artifacts
          mv artifacts/*.box ros.box
          rm -rf artifacts
          export BOX=$PWD/ros.box
          make integration-tests
      - name: Upload logs
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: ros-libvirt.logs.zip
          path: tests/**/logs/*
          if-no-files-found: warn
      - name: Release space from worker ♻
        if: always()
        run: |
          cd tests && make clean || true
          sudo rm -rf build bin dist || true
          docker system prune -f -a --volumes || true
