# This workflow is a reusable one called by other workflows
name: (template) Elemental E2E multi clusters CLI tests

on:
  workflow_call:
    # Variables to set when calling this reusable workflow
    inputs:
      boot_type:
        required: true
        type: string
      ca_type:
        required: true
        type: string
      cert-manager_version:
        required: true
        type: string
      cluster_name:
        required: true
        type: string
      cluster_namespace:
        required: true
        type: string
      cluster_number:
        required: true
        type: string
      cluster_type:
        required: true
        type: string
      k8s_downstream_version:
        required: true
        type: string
      k8s_upstream_version:
        required: true
        type: string
      operator_repo:
        required: true
        type: string
      os_to_test:
        required: true
        type: string
      public_domain:
        required: true
        type: string
      public_fqdn:
        required: true
        type: string
      qase_project_code:
        required: true
        type: string
      qase_run_id:
        required: true
        type: string
      rancher_version:
        required: true
        type: string
      runner_label:
        required: true
        type: string
      test_description:
        required: true
        type: string
      test_type:
        required: true
        type: string

    # Variables to set when calling this reusable workflow
    secrets:
      qase_api_token:

jobs:
  multi:
    runs-on: ${{ inputs.runner_label }}
    outputs:
      # For this to work 'id:' in steps are mandatory!
      steps_status: ${{ join(steps.*.conclusion, ' ') }}
    env:
      CERT_MANAGER_VERSION: ${{ inputs.cert-manager_version }}
      CLUSTER_NAME: ${{ inputs.cluster_name }}
      CLUSTER_NS: ${{ inputs.cluster_namespace }}
      CLUSTER_TYPE: ${{ inputs.cluster_type }}
      # QASE variables
      QASE_API_TOKEN: ${{ secrets.qase_api_token }}
      QASE_PROJECT_CODE: ${{ inputs.qase_project_code }}
      QASE_RUN_ID: ${{ inputs.qase_run_id }}
      # K3S / RKE2 flags to use for installation
      INSTALL_K3S_SKIP_ENABLE: true
      INSTALL_K3S_VERSION: ${{ inputs.k8s_upstream_version }}
      INSTALL_RKE2_VERSION: ${{ inputs.k8s_upstream_version }}
      K3S_KUBECONFIG_MODE: 0644
      # Distribution to use to host Rancher Manager (K3s or RKE2)
      K8S_UPSTREAM_VERSION: ${{ inputs.k8s_upstream_version }}
      # For K8s cluster to provision with Rancher Manager
      K8S_DOWNSTREAM_VERSION: ${{ inputs.k8s_downstream_version }}
      # For Rancher Manager
      RANCHER_VERSION: ${{ inputs.rancher_version }}
      TEST_TYPE: ${{ inputs.test_type }}
      TIMEOUT_SCALE: 3
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Go
        id: setup_go
        uses: actions/setup-go@v5
        with:
          cache-dependency-path: tests/go.sum
          go-version-file: tests/go.mod

      - name: Define needed system variables
        id: define_sys_vars
        run: |
          # Add missing PATH, removed in recent distributions for security reasons...
          echo "/usr/local/bin" >> ${GITHUB_PATH}

      - name: Install Rancher Manager and Elemental
        id: install_rancher_elemental
        env:
          CA_TYPE: ${{ inputs.ca_type }}
          OPERATOR_REPO: ${{ inputs.operator_repo }}
          PUBLIC_FQDN: ${{ inputs.public_fqdn }}
          PUBLIC_DOMAIN: ${{ inputs.public_domain }}
        run: cd tests && make e2e-install-rancher

      - name: Extract component versions/informations
        id: component
        run: |
          # Extract CertManager version
          CERT_MANAGER_VERSION=$(kubectl get pod \
                                   --namespace cert-manager \
                                   -l app=cert-manager \
                                   -o jsonpath={.items[*].status.containerStatuses[*].image} 2> /dev/null || true)

          # Extract elemental-operator version
          OPERATOR_VERSION=$(kubectl get pod \
                               --namespace cattle-elemental-system \
                               -l app=elemental-operator \
                               -o jsonpath={.items[*].status.containerStatuses[*].image} 2> /dev/null || true)

          # Extract Rancher Manager version
          RANCHER_VERSION=$(kubectl get pod \
                              --namespace cattle-system \
                              -l app=rancher \
                              -o jsonpath={.items[*].status.containerStatuses[*].image} 2> /dev/null || true)

          # Export values
          echo "cert_manager_version=${CERT_MANAGER_VERSION}" >> ${GITHUB_OUTPUT}
          echo "operator_version=${OPERATOR_VERSION}" >> ${GITHUB_OUTPUT}
          echo "rancher_image_version=${RANCHER_VERSION}" >> ${GITHUB_OUTPUT}

      - name: Deploy multiple clusters (with 3 nodes by cluster)
        id: deploy_multi_clusters
        env:
          CLUSTER_NUMBER: ${{ inputs.cluster_number }}
          BOOT_TYPE: ${{ inputs.boot_type }}
          OS_TO_TEST: ${{ inputs.os_to_test }}
        run: |
          # Set RAM to 10GB for RKE2 and vCPU to 6, a bit more than the recommended values
          if ${{ contains(inputs.k8s_upstream_version, 'rke') }}; then
            export VM_MEM=10240
            export VM_CPU=6
          fi
          cd tests && make e2e-multi-cluster

      - name: Extract ISO version
        id: iso_version
        if: ${{ always() }}
        run: |
          # Extract OS version from ISO
          ISO=$(file -Ls *.iso 2>/dev/null | awk -F':' '/boot sector/ { print $1 }')
          if [[ -n "${ISO}" ]]; then
            [[ "${{ inputs.os_to_test }}" == "dev" ]] \
              && INITRD_NAME="elemental.initrd*" \
              || INITRD_NAME="initrd"
            INITRD_FILE=$(isoinfo -i ${ISO} -R -find -type f -name ${INITRD_NAME} -print 2>/dev/null)
            isoinfo -i ${ISO} -R -x ${INITRD_FILE} 2>/dev/null \
              | xz -dc \
              | cpio -i --to-stdout usr/lib/initrd-release > os-release
            eval $(grep IMAGE_TAG os-release 2>/dev/null)
          fi

          # Export value (even if empty!)
          echo "os_version=${IMAGE_TAG}" >> ${GITHUB_OUTPUT}

      # This step must be called in each worklow that wants a summary!
      - name: Get logs and add summary
        id: logs_summary
        if: ${{ always() }}
        uses: ./.github/actions/logs-and-summary
        with:
          ca_type: ${{ inputs.ca_type }}
          cert_manager_version: ${{ steps.component.outputs.cert_manager_version }}
          cluster_type: ${{ inputs.cluster_type }}
          k8s_downstream_version: ${{ inputs.k8s_downstream_version }}
          k8s_upstream_version: ${{ inputs.k8s_upstream_version }}
          operator_version: ${{ steps.component.outputs.operator_version }}
          os_to_test: ${{ inputs.os_to_test }}
          os_version: ${{ steps.iso_version.outputs.os_version }}
          public_fqdn: ${{ inputs.public_fqdn }}
          rancher_image_version: ${{ steps.component.outputs.rancher_image_version }}
          rancher_version: ${{ inputs.rancher_version }}
          test_type: ${{ inputs.test_type }}
          test_description: ${{ inputs.test_description }}
