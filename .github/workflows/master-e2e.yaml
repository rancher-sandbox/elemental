# This workflow is a reusable one called by other workflows
name: (template) Elemental E2E tests with Rancher Manager

on:
  workflow_call:
    # Variables to set when calling this reusable workflow
    secrets:
      credentials:
        description: Credentials to use to connect
        required: true
    inputs:
      ui_account:
        description: Account used to test RBAC role in UI
        required: false
        type: string
      cluster_name:
        description: Name of the provisioned cluster
        required: true
        type: string
      iso_to_test:
        description: ISO to test (default built one is empty)
        type: string
      k8s_version_to_provision:
        description: Name and version of installed K8s distribution
        required: true
        type: string
      ca_type:
        description: CA type to use (selfsigned or private)
        default: selfsigned
        type: string
      node_number:
        description: Number of nodes to deploy on the provisioned cluster
        default: 5
        type: string
      rancher_channel:
        description: Rancher Manager channel to use for installation (alpha/latest/stable)
        default: stable
        type: string
      rancher_version:
        description: Rancher Manager version to use for installation (fixed version or latest)
        default: latest
        type: string
      runner:
        description: Runner on which to execute tests
        required: true
        type: string
      start_condition:
        description: Start condition of the runner
        default: success
        type: string
      test_type:
        description: Type of test to run (cli or ui)
        default: cli
        type: string
      upgrade_operator:
        description: URL to elemental-operator version to upgrade to
        type: string
      zone:
        description: GCP zone to host the runner
        default: us-central1-a
        type: string
      workflow_download:
        description: build-ci workflow to use for artifacts
        default: build-ci.yaml
        type: string

jobs:
  start-runner:
    if: ${{ inputs.start_condition == 'success' }}
    runs-on: ubuntu-latest
    steps:
      # actions/checkout MUST come before auth
      - name: Checkout
        uses: actions/checkout@v3
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.credentials }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0
      - name: Start runner
        run: gcloud compute instances start --zone ${{ inputs.zone }} ${{ inputs.runner }}
  e2e:
    needs: start-runner
    runs-on: ${{ inputs.runner }}
    env:
      TIMEOUT_SCALE: 2
      ARCH: amd64
      CLUSTER_NAME: ${{ inputs.cluster_name }}
      CLUSTER_NS: fleet-default
      # For K3s installation used to host Rancher Manager
      INSTALL_K3S_VERSION: v1.24.7+k3s1
      INSTALL_K3S_SKIP_ENABLE: true
      K3S_KUBECONFIG_MODE: 0644
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
      # For Rancher Manager
      RANCHER_CHANNEL: ${{ inputs.rancher_channel }}
      RANCHER_VERSION: ${{ inputs.rancher_version }}
      UPGRADE_OPERATOR: ${{ inputs.upgrade_operator }}
      # For K8s cluster to provision with Rancher Manager
      K8S_VERSION_TO_PROVISION: ${{ inputs.k8s_version_to_provision }}
    steps:
      - name: Be sure to remove all previous data from worker â™»
        run: rm -rf ./*
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: '~1.18'
      - name: Download default ISO
        # NOTE: download the *default* ISO, not the one passed as a parameter
        if: ${{ inputs.iso_to_test == '' }}
        uses: dawidd6/action-download-artifact@v2.24.0
        with:
          workflow: ${{ inputs.workflow_download }}
          workflow_conclusion: success
          name: iso-image
          # Force the path, this is a security hint!
          path: ./
      - name: Download specified ISO
        if: ${{ inputs.iso_to_test != '' }}
        env:
          ISO_TO_TEST: ${{ inputs.iso_to_test }}
          TAG: from-obs
        run: |
          wget -v -L -c ${ISO_TO_TEST} -O elemental-${TAG}.iso
      - name: Extract iPXE artifacts from ISO
        run: |
          # Extract TAG
          ISO=$(ls elemental-*.iso 2>/dev/null)
          TAG=${ISO#*-}
          export TAG=${TAG%.iso}
          # Move ISO to build for next step
          mkdir -p build
          mv -f ${ISO} build/
          # Extract iPXE artifacts
          make extract_kernel_init_squash
          make ipxe
          mv -f build/* .
          # Looks a little bit weird but we have to keep the ISO in build!
          mv -f elemental-*.iso build/
      - name: Clean local Helm repositories
        run: |
          # Clean Helm repo
          HELM_REPO=$(helm repo list 2>/dev/null | awk '(NR>1) { print $1 }')
          [[ -n "${HELM_REPO}" ]] && helm repo remove ${HELM_REPO} || true
      - name: Install Rancher
        id: installation
        env:
          CA_TYPE: ${{ inputs.ca_type }}
        run: |
          export MY_HOSTNAME=$(hostname -f)
          echo "MY_HOSTNAME=$MY_HOSTNAME" >> $GITHUB_OUTPUT
          cd tests && HOSTNAME=$(hostname -f) make e2e-install-rancher
      - name: Cypress tests - Basics
        # Basics means tests without an extra elemental node needed
        if: ${{ inputs.test_type == 'ui' }}
        env:
          UI_ACCOUNT: ${{ inputs.ui_account }}
          BROWSER: chrome
          CYPRESS_DOCKER: 'cypress/included:10.9.0'
          RANCHER_PASSWORD: rancherpassword
          RANCHER_URL: https://${{ steps.installation.outputs.MY_HOSTNAME }}/dashboard
          RANCHER_USER: admin
          SPEC: |
            cypress/e2e/unit_tests/first_connection.spec.ts
            cypress/e2e/unit_tests/elemental_plugin.spec.ts
            cypress/e2e/unit_tests/user.spec.ts
            cypress/e2e/unit_tests/menu.spec.ts
            cypress/e2e/unit_tests/machine_registration.spec.ts
        run: make -f tests/Makefile start-cypress-tests
      - name: Upload Cypress screenshots (Basics)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots-basics-${{ inputs.cluster_name }}
          path: cypress/screenshots
          retention-days: 7
          if-no-files-found: ignore
      - name: Upload Cypress videos (Basics)
        # Test run video is always captured, so this action uses "always()" condition
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos-basics-${{ inputs.cluster_name }}
          path: cypress/videos
          retention-days: 7
          if-no-files-found: ignore
      - name: Deploy a node to join Rancher manager
        if: ${{ inputs.test_type == 'ui' }}
        env:
          VM_INDEX: 1
        run: cd tests && make e2e-ui-rancher
      - name: Cypress tests - Advanced
        # Advanced means tests which needs an extra elemental node (provisioned with libvirt)
        if: ${{ inputs.test_type == 'ui' }}
        env:
          UI_ACCOUNT: ${{ inputs.ui_account }}
          BROWSER: firefox
          CYPRESS_DOCKER: 'cypress/included:10.9.0'
          RANCHER_PASSWORD: rancherpassword
          RANCHER_URL: https://${{ steps.installation.outputs.MY_HOSTNAME }}/dashboard
          RANCHER_USER: admin
          SPEC: |
            cypress/e2e/unit_tests/machine_selector.spec.ts
            cypress/e2e/unit_tests/machine_inventory.spec.ts
            cypress/e2e/unit_tests/upgrade.spec.ts
        run: make -f tests/Makefile start-cypress-tests
      - name: Upload Cypress screenshots (Advanced)
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots-advanced-${{ inputs.cluster_name }}
          path: cypress/screenshots
          retention-days: 7
          if-no-files-found: ignore
      - name: Upload Cypress videos (Advanced)
        # Test run video is always captured, so this action uses "always()" condition
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos-advanced-${{ inputs.cluster_name }}
          path: cypress/videos
          retention-days: 7
          if-no-files-found: ignore
      - name: Configure Rancher & Libvirt
        if: ${{ inputs.test_type == 'cli' }}
        run: cd tests && make e2e-configure-rancher
      - name: Bootstrap node 1 with current build (use Emulated TPM and iPXE)
        if: ${{ inputs.test_type == 'cli' }}
        env:
          EMULATE_TPM: true
          VM_INDEX: 1
        run: cd tests && make e2e-bootstrap-node
      - name: Upgrade node 1 (with osImage method) to latest build
        if: ${{ inputs.test_type == 'cli' }}
        env:
          CONTAINER_IMAGE: quay.io/costoolkit/elemental-ci:latest
          UPGRADE_TYPE: osImage
          VM_INDEX: 1
        run: cd tests && make e2e-upgrade-node
      - name: Bootstrap node 2 with current build (use ISO)
        if: ${{ inputs.test_type == 'cli' }}
        env:
          ISO_BOOT: true
          VM_INDEX: 2
        run: cd tests && make e2e-bootstrap-node
      - name: Bootstrap node 3 with current build (use ISO)
        if: ${{ inputs.test_type == 'cli' }}
        env:
          ISO_BOOT: true
          VM_INDEX: 3
        run: cd tests && make e2e-bootstrap-node
      - name: Upgrade node 2 (with manual method) to latest build
        if: ${{ inputs.test_type == 'cli' }}
        env:
          CONTAINER_IMAGE: quay.io/costoolkit/elemental-ci:latest
          UPGRADE_TYPE: manual
          VM_INDEX: 2
        run: cd tests && make e2e-upgrade-node
      - name: Upgrade node 3 (with managedOSVersionName method) to specified Teal version
        if: ${{ inputs.test_type == 'cli' }}
        env:
          IMAGE_VERSION: teal-5.3
          UPGRADE_TYPE: managedOSVersionName
          VM_INDEX: 3
        run: cd tests && make e2e-upgrade-node
      - name: Bootstrap additional nodes with current build (use iPXE)
        if: ${{ inputs.test_type == 'cli' }}
        env:
          NODE_NUMBER: ${{ inputs.node_number }}
        run: |
          cd tests
          for ((I=4; I<=NODE_NUMBER; ++I)); do
            echo "=> Bootstrap node ${I}..."
            VM_INDEX=${I} make e2e-bootstrap-node
          done
      - name: List installed nodes
        if: ${{ inputs.test_type == 'cli' }}
        run: sudo virsh list
      - name: Remove VMs and K3s/RancherManager from worker â™»
        if: always()
        run: |
          # Remove all VMs
          for I in $(sudo virsh list | awk '/node-/ { print $2 }'); do
            for C in destroy undefine; do
              [[ "${C}" == "undefine" ]] && OPT="--nvram" || unset OPT
              sudo virsh ${C} ${OPT} ${I} >/dev/null 2>&1 || true
            done
          done
          # Remove K3s and Rancher Manager
          /usr/local/bin/k3s-uninstall.sh || true
      - name: Remove remaining stuff from worker â™»
        if: always()
        uses: colpal/actions-clean@v1
      - name: Send failed status to slack
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "Workflow build-ci ${{ github.job }}"
                    },
                    "accessory": {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": ":github:",
                         "emoji": true
                        },
                      "url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                    }
                  }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
  stop-runner:
    if: always()
    needs: e2e
    runs-on: ubuntu-latest
    steps:
      # actions/checkout MUST come before auth
      - name: Checkout
        uses: actions/checkout@v3
      - name: Authenticate to GCP
        uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.credentials }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0
      - name: Stop runner
        run: gcloud compute instances stop --zone ${{ inputs.zone }} ${{ inputs.runner }}
