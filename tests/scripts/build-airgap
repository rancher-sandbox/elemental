#!/bin/bash

# Build Airgap

set -x

# Retry helm command in case of sporadic issue
function RunHelmCmdWithRetry() {
  # Wait for a maximum of 1 minute
  for ((i=0; i<60; i++)); do
    # If helm command is OK then we simply return (exit the function)
    helm $* && return

    # Wait a little
    sleep 5
  done

  # If we are here then an error happened!
  exit 1
}

# Retry skopeo command in case of sporadic issue
function RunSkopeoCmdWithRetry() {
  # Wait for a maximum of 1 minute
  for ((i=0; i<60; i++)); do
    # If skopeo command is OK then we simply return (exit the function)
    skopeo $* && return

    # Wait a little
    sleep 5
  done

  # If we are here then an error happened!
  exit 1
}

# Variable(s)
K3S_UPSTREAM_VERSION=$1
CERT_MANAGER_VERSION=$2
RANCHER_CHANNEL=$3
K3S_DOWNSTREAM_VERSION=$4
ELEMENTAL_REPO=$5
DEPLOY_AIRGAP_SCRIPT=$(realpath ../scripts/deploy-airgap)
OPT_RANCHER=${HOME}/airgap_rancher

# Set Elemental version
case ${ELEMENTAL_REPO} in
  */dev/*)
    ELEMENTAL_VERSION=dev
    ;;
  */staging/*)
    ELEMENTAL_VERSION=staging
    ;;
  *)
    ELEMENTAL_VERSION=stable
    ;;
esac

# Format K8s version
TMP_VER=${K3S_UPSTREAM_VERSION/+*}
K8S_UPSTREAM_VERSION=${TMP_VER/v}
TMP_VER=${K3S_DOWNSTREAM_VERSION/+*}
K8S_DOWNSTREAM_VERSION=${TMP_VER/v}

# Create directories
mkdir -p ${OPT_RANCHER}/{k3s_${K8S_UPSTREAM_VERSION},k3s_${K8S_DOWNSTREAM_VERSION},helm} ${OPT_RANCHER}/images/{cert,rancher,registry,elemental}

# Install packages
sudo zypper --no-refresh -n in skopeo yq

# Add rancher manager in /etc/hosts
sudo sh -c 'echo "192.168.122.102 rancher-manager.test" >> /etc/hosts'

# Download k3s and rancher
for k8s_ver in ${K3S_UPSTREAM_VERSION}:${K8S_UPSTREAM_VERSION} ${K3S_DOWNSTREAM_VERSION}:${K8S_DOWNSTREAM_VERSION}; do
  K3S_URL=https://github.com/k3s-io/k3s/releases/download/${k8s_ver%:*}
  for i in k3s-airgap-images-amd64.tar.zst k3s; do
    curl -sL ${K3S_URL}/${i} -o ${OPT_RANCHER}/k3s_${k8s_ver#*:}/${i}

    # Get the install script
    curl -sfL https://get.k3s.io -o ${OPT_RANCHER}/k3s_${k8s_ver#*:}/install.sh

    # Get the airgap deploy script
    cp ${DEPLOY_AIRGAP_SCRIPT} ${OPT_RANCHER}/k3s_${k8s_ver#*:}
  done
done

# Get Helm Charts
cd ${OPT_RANCHER}/helm/

# Add repos
RunHelmCmdWithRetry repo add jetstack https://charts.jetstack.io > /dev/null 2>&1
RunHelmCmdWithRetry repo add rancher-${RANCHER_CHANNEL} https://releases.rancher.com/server-charts/${RANCHER_CHANNEL} > /dev/null 2>&1
RunHelmCmdWithRetry repo update > /dev/null 2>&1

# Get charts
RunHelmCmdWithRetry pull jetstack/cert-manager --version ${CERT_MANAGER_VERSION} > /dev/null 2>&1
[[ "${RANCHER_CHANNEL}" == "latest" ]] && DEVEL="--devel"
RunHelmCmdWithRetry pull rancher-${RANCHER_CHANNEL}/rancher ${DEVEL} > /dev/null 2>&1
for i in elemental-operator-chart elemental-operator-crds-chart ; do
  RunHelmCmdWithRetry pull ${ELEMENTAL_REPO}/${i} > /dev/null 2>&1
done

# Get rancher manager version
RANCHER_MANAGER_VERSION=$(ls rancher* 2>/dev/null | cut -d '-' -f '2-3')

# Temporary thing to get latest version of sle-micro-iso (very ugly...)
ELEMENTAL_AIRGAP_REPO=https://raw.githubusercontent.com/rancher/elemental-operator/main/scripts
ELEMENTAL_AIRGAP_SCRIPT=elemental-airgap.sh
curl -sOL ${ELEMENTAL_AIRGAP_REPO}/${ELEMENTAL_AIRGAP_SCRIPT}
bash ${ELEMENTAL_AIRGAP_SCRIPT} -d -r localhost:5000 -sa ${ELEMENTAL_VERSION}

# Get Images - Rancher/Elemental
cd ${OPT_RANCHER}/images/

# Rancher image list
IMAGES_FILE_TMP=/tmp/rancher-images
IMAGES_FILE_UNSORTED=/tmp/rancher-images_unsorted
RANCHER_IMAGES_FILE=rancher/rancher-images.txt
curl -sL https://github.com/rancher/rancher/releases/download/v${RANCHER_MANAGER_VERSION%.*}/rancher-images.txt -o ${IMAGES_FILE_TMP}

# Shorten rancher list with a sort
# Fix library tags
sed -i -e '0,/busybox/s/busybox/library\/busybox/' -e 's/registry/library\/registry/g' ${IMAGES_FILE_TMP}

# We need to keep the following images
IMAGES_LIST="mirrored-cluster-api-controller mirrored-pause mirrored-coredns-coredns mirrored-library-traefik"
for i in ${IMAGES_LIST}; do
  IMAGES+="$(grep $i ${IMAGES_FILE_TMP})\n"
done

# Remove things that are not needed and overlapped
sed -i -E '/neuvector|minio|gke|aks|eks|sriov|harvester|mirrored|longhorn|thanos|tekton|istio|multus|hyper|jenkins|windows/d' ${IMAGES_FILE_TMP}
echo -e ${IMAGES} >> ${IMAGES_FILE_TMP}

# Get latest version
for i in $(awk -F: '{print $1}' ${IMAGES_FILE_TMP}); do
  grep -w $i ${IMAGES_FILE_TMP} | sort -Vr | head -1 >> ${IMAGES_FILE_UNSORTED}
done

# Except for rancher/kubectl
grep 'rancher/kubectl' ${IMAGES_FILE_TMP} >> ${IMAGES_FILE_UNSORTED}
for k8s_ver in ${K8S_UPSTREAM_VERSION} ${K8S_DOWNSTREAM_VERSION}; do
  grep "rancher/system-agent-installer-k3s:v${k8s_ver}" ${IMAGES_FILE_TMP} >> ${IMAGES_FILE_UNSORTED}
done

# Final sort
sort -u ${IMAGES_FILE_UNSORTED} > ${RANCHER_IMAGES_FILE}

# Cert-manager image list
CERT_IMAGES_FILE=cert/cert-manager-images.txt
ELEMENTAL_IMAGES_FILE=elemental/elemental-images.txt
RunHelmCmdWithRetry template --kube-version=1.22 ${OPT_RANCHER}/helm/cert-manager-${CERT_MANAGER_VERSION}.tgz \
  | awk '$1 ~ /image:/ {print $2}' \
  | sed s/\"//g > ${CERT_IMAGES_FILE}

# Elemental image list
RunHelmCmdWithRetry template --kube-version=1.22 ${OPT_RANCHER}/helm/elemental-operator-chart-*.tgz \
  | awk '$1 ~ /image:/ {print $2}' \
  | sed s/\"//g > ${ELEMENTAL_IMAGES_FILE}
RunHelmCmdWithRetry template --kube-version=1.22 ${OPT_RANCHER}/helm/elemental-operator-chart-*.tgz \
  | grep 'seedimage-builder' \
  | awk '{print $2}' >> ${ELEMENTAL_IMAGES_FILE}

# Temporary thing to get latest version of sle-micro-iso (very ugly...)
grep 'registry.opensuse.*sle-micro-iso' ${OPT_RANCHER}/helm/elemental-images.txt >> ${ELEMENTAL_IMAGES_FILE}

# Get images
# Skopeo - cert-manager
for i in $(< ${CERT_IMAGES_FILE}); do
  VAR=$(awk -F/ '{print $3}' <<< ${i})
  RunSkopeoCmdWithRetry copy docker://${i} docker-archive:cert/${VAR//:/_}.tar:${VAR} > /dev/null 2>&1
done

# Skopeo - Elemental
for i in $(< ${ELEMENTAL_IMAGES_FILE}); do
  grep -q 'sle-micro-iso' <<< ${i} \
    && VALUE="\$8\"-\"\$9" \
    || VALUE=\$8

  VAR=$(awk -F/ "{print ${VALUE}}" <<< ${i})
  RunSkopeoCmdWithRetry copy docker://${i} docker-archive:elemental/${VAR//:/_}.tar:${VAR} > /dev/null 2>&1
done

# Skopeo - Rancher
for i in $(< ${RANCHER_IMAGES_FILE}); do
  VAR=$(awk -F/ '{print $2}' <<< ${i})
  RunSkopeoCmdWithRetry copy docker://${i} docker-archive:rancher/${VAR//:/_}.tar:${VAR} > /dev/null 2>&1
done

# Skopeo - Registry
RunSkopeoCmdWithRetry copy --additional-tag registry:latest docker://registry:latest docker-archive:registry/registry.tar > /dev/null 2>&1

# Compress all the things
cd ${OPT_RANCHER}
tar -I zstd -vcf ${OPT_RANCHER%/*}/airgap_rancher.zst $(ls 2>/dev/null) > /dev/null 2>&1
