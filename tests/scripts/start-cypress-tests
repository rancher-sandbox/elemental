#!/bin/bash

set -evx

ELEMENTAL_ISO="/home/gh-runner/actions-runner/_work/elemental/elemental/elemental-from-cypress.iso"

# Start a simple HTTP server for sharing some config files
HTTP_SRV_CMD="python3 -m http.server"
pushd ..
setsid --fork ${HTTP_SRV_CMD} >/dev/null 2>&1
popd

pushd cypress/latest

# Needed to install Cypress plugins
npm install

# Start Cypress tests with docker
docker run -v $PWD:/workdir -w /workdir                     \
    -e CYPRESS_TAGS=$CYPRESS_TAGS                           \
    -e ELEMENTAL_UI_VERSION=$ELEMENTAL_UI_VERSION           \
    -e ISO_TO_TEST=$ISO_TO_TEST                             \
    -e K8S_UPSTREAM_VERSION=$K8S_UPSTREAM_VERSION           \
    -e K8S_VERSION_TO_PROVISION=$K8S_VERSION_TO_PROVISION   \
    -e OPERATOR_VERSION=$OPERATOR_VERSION                   \
    -e PROXY=$PROXY                                         \
    -e RANCHER_PASSWORD=$RANCHER_PASSWORD                   \
    -e RANCHER_URL=$RANCHER_URL                             \
    -e RANCHER_USER=$RANCHER_USER                           \
    -e UI_ACCOUNT=$UI_ACCOUNT                               \
    -e UPGRADE_CHANNEL_LIST=$UPGRADE_CHANNEL_LIST           \
    -e UPGRADE_IMAGE=$UPGRADE_IMAGE                         \
    --add-host host.docker.internal:host-gateway            \
    --ipc=host                                              \
    $CYPRESS_DOCKER                                         \
    -s $SPEC

[[ -d downloads ]] && sudo chown -R gh-runner:users downloads videos

# Move elemental.iso into the expected folder
if [[ ! -f ${ELEMENTAL_ISO} ]]; then
  # Upgrade scenario
  # We start from stable ISO built within RegistrationEndpoint menu
  # Because we have to test the download feature but we can only build from stable for now
  if [[ ${CYPRESS_TAGS} == "upgrade" ]]; then
    mv downloads/*.iso ${ELEMENTAL_ISO}
  # RKE2 as upstream cluster
  # We cannot use PXE boot so we have to boot from ISO but we cannot use stable ISO
  # We need to use a custom ISO and the menu doesn't allow to do it now.
  elif grep rke <<< ${K8S_UPSTREAM_VERSION}; then
    wget $(kubectl get seedimage mycustomseedimage -n fleet-default -o=jsonpath='{.status.downloadURL}') --no-check-certificate -O ${ELEMENTAL_ISO}
  fi
fi
popd

# Kill the HTTP server
pkill -f "${HTTP_SRV_CMD}"
