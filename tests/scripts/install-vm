#!/bin/bash

set -e -x

# Variable(s)
VM_NAME=$1
MAC=$2
ARCH=$(uname -m)
FW_CODE=/usr/share/qemu/ovmf-${ARCH}-smm-suse-code.bin
FW_VARS=$(realpath ../assets/ovmf-template-vars.fd)

# Don't configure TPM if software emulation (EMULATE_TPM=true) is used
if [[ ${EMULATE_TPM} != "true" ]]; then
  EMULATED_TPM="--tpm emulator,model=tpm-crb,version=2.0"
fi

# iPXE stuff will not be used if ISO is set
if [[ ${ISO_BOOT} == "true" ]]; then
  ISO=$(realpath ../../elemental-*.iso 2>/dev/null)

  # Exit if ISO is not available
  [[ ! -f ${ISO} ]] \
    && echo "File ${ISO} not found! Exiting!" >&2 \
    && exit 1

  # Force ISO boot
  INSTALL_FLAG="--cdrom ${ISO}"
else
  # Exit if binary is not available
  IPXE_BIN=$(realpath ../assets/ipxe-${ARCH}.efi)
  [[ ! -f ${IPXE_BIN} ]] \
    && echo "File ${IPXE_BIN} not found! Exiting!" >&2 \
    && exit 1

  # Create symlink for binary
  SYM_LINK=../../ipxe.efi
  rm -f ${SYM_LINK}  # Force remove, to avoid issue with 'ln'
  ln -s ${IPXE_BIN} ${SYM_LINK}

  # Force PXE boot
  INSTALL_FLAG="--pxe"
fi

# Create logs directory if needed
mkdir -p logs

# Create a dedicated directory for storage pool
mkdir -p ${VM_NAME}

# Create VM
script -e -O logs/bootstrap_${VM_NAME}.log \
  -c "sudo virt-install \
  --name ${VM_NAME} \
  --os-variant opensuse-unknown \
  --virt-type kvm \
  --machine q35 \
  --boot loader=${FW_CODE},loader.readonly=yes,loader.secure=yes,loader.type=pflash,nvram.template=${FW_VARS} \
  --features smm.state=yes \
  --ram=3072 \
  --vcpus=2 \
  --cpu host \
  --disk path=${VM_NAME}/${VM_NAME}.img,bus=scsi,size=35 \
  --check disk_size=off \
  --graphics none \
  --serial pty \
  --console pty,target_type=virtio \
  --rng random \
  ${EMULATED_TPM} \
  --noreboot \
  ${INSTALL_FLAG} \
  --network network=default,bridge=virbr0,model=virtio,mac=${MAC}"
