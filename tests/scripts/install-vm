#!/bin/bash

set -e -x

# Variable(s)
VM_NAME=$1
MAC=$2
ARCH=$(uname -m)
FW_DIR=/usr/share/qemu
FW_BASE=${FW_DIR}/ovmf-${ARCH}-secure-ipxe-support
FW_CODE=${FW_BASE}-code.bin

# Don't configure TPM if software emulation (EMULATE_TPM=true) is used
if [[ ${EMULATE_TPM} != "true" ]]; then
  EMULATED_TPM="--tpm emulator,model=tpm-crb,version=2.0"
fi

# Copy our own UEFI firmware(s) (support iPXE with Secure Boot)
sudo cp -vr ../assets/ovmf/* ${FW_DIR}

# iPXE stuff will not be used if ISO is set
if [[ ${ISO_BOOT} == "true" ]]; then
  ISO=$(realpath ../../elemental-*.iso 2>/dev/null)

  # Exit if ISO is not available
  [[ ! -f ${ISO} ]] \
    && echo "File ${ISO} not found! Exiting!" >&2 \
    && exit 1

  # Force ISO boot
  INSTALL_FLAG="--cdrom ${ISO}"
else
  # NOTE: shim is needed to be able to use private MOK keys with Secure Boot
  for I in ipxe shim; do
    # Exit if binary is not available
    BIN=$(realpath ../assets/efi-bin/${I}-${ARCH}.efi)
    [[ ! -f ${BIN} ]] \
      && echo "File ${BIN} not found! Exiting!" >&2 \
      && exit 1

    # As shim.efi is hardcoded to run GRUB we need to rename iPXE link
    [[ ${I} == ipxe ]] && I=grub

    # Create symlink for binary
    rm -f ../../${I}.efi  # Force remove, to avoid issue with 'ln'
    ln -s ${BIN} ../../${I}.efi
  done

  # Force PXE boot
  INSTALL_FLAG="--pxe"
fi

# Create VM
script -e -c "sudo virt-install \
  --name ${VM_NAME} \
  --os-variant opensuse-unknown \
  --virt-type kvm \
  --machine q35 \
  --boot loader=${FW_CODE},loader.readonly=yes,loader.secure=yes,loader.type=pflash \
  --ram=3072 \
  --vcpus=2 \
  --cpu host \
  --disk path=${VM_NAME}.img,bus=scsi,size=35 \
  --check disk_size=off \
  --graphics none \
  --serial pty \
  --console pty,target_type=virtio \
  --rng random \
  ${EMULATED_TPM} \
  --noreboot \
  ${INSTALL_FLAG} \
  --network network=default,bridge=virbr0,model=virtio,mac=${MAC}"
